{"version":3,"sources":["api/axios.js","api/index.js","widget/Dot.jsx","page/Home.jsx","page/Article.jsx","App.jsx","serviceWorker.js","index.js"],"names":["DOMAIN","get","url","params","Promise","resolve","reject","axios","then","res","data","catch","err","defaults","baseURL","timeout","interceptors","request","use","config","response","status","error","Dot","styled","span","E","ListContent","div","List","Icon","img","SubTitle","Title","Link","AddBtn","TopTitle","useState","list","_list","page","_page","init","useCallback","para","rs","console","log","useEffect","map","avatar_url","create_time","comment_num","id","email","name","title","preview_content","preview_img","tag","uid","update_time","key","src","alt","to","target","onClick","BoxContent","Box","useParams","info","_info","style","fontSize","color","dangerouslySetInnerHTML","__html","content","path","exact","Home","Article","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6858f654.chunk.js","sourcesContent":["import axios from \"axios\"\r\nimport qs from \"querystring\"\r\n\r\nlet DOMAIN = \"\"\r\nif (process.env.NODE_ENV === \"development\") {\r\n  DOMAIN = \"http://localhost:5679\"\r\n} else if (process.env.NODE_ENV === \"production\") {\r\n  DOMAIN = \"http://api.taswell.cn\"\r\n}\r\n\r\nDOMAIN = \"http://api.taswell.cn\"\r\n\r\naxios.defaults.baseURL = DOMAIN + \"/blog\"\r\n\r\naxios.defaults.timeout = 1000 * 60 * 2\r\n\r\naxios.interceptors.request.use((config) => {\r\n  const authorization = \"\"\r\n  authorization && (config.headers.Authorization = authorization)\r\n  return config\r\n})\r\n\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    if (response.status === 200) {\r\n      return Promise.resolve(response)\r\n    } else {\r\n      return Promise.reject(response)\r\n    }\r\n  },\r\n  (error) => {\r\n    return Promise.reject({ error })\r\n  }\r\n)\r\n\r\nexport function get(url, params) {\r\n  return new Promise((resolve, reject) => {\r\n    axios\r\n      .get(url, {\r\n        params: params,\r\n      })\r\n      .then((res) => {\r\n        resolve(res.data)\r\n      })\r\n      .catch((err) => {\r\n        reject({ err })\r\n      })\r\n  })\r\n}\r\n\r\nexport function post(url, params) {\r\n  return new Promise((resolve, reject) => {\r\n    axios\r\n      .post(url, qs.stringify(params))\r\n      .then((res) => {\r\n        resolve(res.data)\r\n      })\r\n      .catch((err) => {\r\n        reject({ err })\r\n      })\r\n  })\r\n}\r\n\r\nexport function fileUpload(url, params) {\r\n  return new Promise((resolve, reject) => {\r\n    let config = { headers: { \"Content-Type\": \"multipart/form-data\" } }\r\n    axios\r\n      .post(url, params, config)\r\n      .then((res) => {\r\n        resolve(res.data)\r\n      })\r\n      .catch((err) => {\r\n        reject({ err })\r\n      })\r\n  })\r\n}\r\n","import { get, fileUpload, post } from \"./axios\"\r\n\r\nexport const DOMAIN_STATIC = \"http://static.taswell.cn\"\r\n\r\nexport const GET_ARTICLES = (para) => get(\"/articles\", para)\r\nexport const GET_PERSON_ACTIVE_RANKINGS = (para) =>\r\n  get(\"/person_active_rankings\", para)\r\nexport const GET_ARTICLE_POPULARITY = (para) => get(\"/article_popularity\", para)\r\nexport const GET_ARTICLE_INFO = (para) => get(\"/article_info\", para)\r\nexport const SET_COMMENT_SAVE = (para) => get(\"/comment_save\", para)\r\nexport const GET_COMMENTS = (para) => get(\"/comments\", para)\r\nexport const GET_NOTICES = (para) => get(\"/notices\", para)\r\nexport const GET_NOTICE_NUM = (para) => get(\"/notice_num\", para)\r\nexport const UPLOAD = (para) => fileUpload(\"/upload\", para)\r\nexport const SET_ARTICLE_SAVE = (para) => post(\"/save\", para)\r\nexport const SET_ARTICLE_UPDATE = (para) => post(\"/update\", para)\r\nexport const SET_ARTICLE_DELETE = (para) => post(\"/delete\", para)\r\nexport const SET_NOTICE_READ = (para) => get(\"/notice_read\", para)\r\nexport const GET_SEARCH_RESULT = (para) => get(\"/search\", para)\r\nexport const GET_ARTICLE_BY_UID = (para) => get(\"/user_articles\", para)\r\nexport const GET_ARTICLE_BY_KEYWORD = (para) => get(\"/keyword_articles\", para)\r\nexport const GET_TAGS = (para) => get(\"/tags\", para)\r\nexport const SET_FOLLOW = (para) => get(\"/follow\", para)\r\nexport const GET_ARTICLES_BY_USER = (para) => get(\"/articles_by_user\", para)\r\nexport const GET_USERINFO_BY_NAME = (para) => get(\"/userinfo_by_name\", para)\r\nexport const GET_FOLLOWING = (para) => get(\"/following\", para)\r\nexport const GET_FOLLOWERS = (para) => get(\"/followers\", para)\r\nexport const GET_MY_FOLLOWS = (para) => get(\"/my_follows\", para)\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nconst Dot = styled.span`\r\n  color: #ccc;\r\n  padding: 0px 5px;\r\n`\r\n\r\nexport default () => <Dot>●</Dot>\r\n","import React, { useEffect, useState, useCallback } from \"react\"\r\nimport { GET_ARTICLES } from \"../api\"\r\nimport styled from \"styled-components\"\r\nimport Dot from \"../widget/Dot\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst E = {\r\n  ListContent: styled.div`\r\n    padding: 20px;\r\n    width: 800px;\r\n    margin: 0 auto;\r\n    border: 2px dashed #ccc;\r\n    border-top: none;\r\n    border-bottom: none;\r\n    background: #fff;\r\n  `,\r\n  List: styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 10px 0px;\r\n  `,\r\n  Icon: styled.img`\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 30px;\r\n    margin-right: 10px;\r\n  `,\r\n  SubTitle: styled.div`\r\n    font-size: 13px;\r\n    color: #aaa;\r\n  `,\r\n  Title: styled(Link)`\r\n    cursor: pointer;\r\n    color:#444;\r\n    :hover {\r\n      text-decoration: underline;\r\n    }\r\n  `,\r\n  AddBtn: styled.div`\r\n  width: 100px;\r\n  border: 1px solid #ccc;\r\n  text-align: center;\r\n  padding: 10px;\r\n  margin: 0 auto;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n  `,\r\n  TopTitle: styled.div`\r\n  text-align: center;\r\n  font-size: 18px;\r\n  color: #333;\r\n  border-bottom: 1px solid #ccc;\r\n  padding-bottom: 10px;\r\n  `\r\n}\r\n\r\nexport default () => {\r\n\r\n\r\n  const [list, _list] = useState([])\r\n  const [page, _page] = useState(0)\r\n\r\n  const init = useCallback(() => {\r\n    GET_ARTICLES({ page }).then((rs) => {\r\n      console.log(rs)\r\n\r\n      _list(list => [...list, ...rs])\r\n    })\r\n  }, [page])\r\n\r\n  useEffect(() => {\r\n    init()\r\n  }, [init])\r\n\r\n  return (\r\n    <E.ListContent>\r\n      <E.TopTitle>FLOWER'S BLOG</E.TopTitle>\r\n      {list.map(\r\n        ({\r\n          avatar_url, // \"http://static.taswell.cn/icon/u=216605226,3652567530&fm=11&gp=0.jpg\"\r\n          comment_num, // \"0\"\r\n          create_time, // \"2020-07-27 10:08:32\"\r\n          email, // \"1058747601@qq.com\"\r\n          id, // 777\r\n          name, // \"娃哈哈\"\r\n          preview_content, // \"↵a↵↵a↵新的houseitem，面积变成价格了↵↵ ↵↵ ↵\"\r\n          preview_img, // (2) [\"http://static.taswell.cn/18/1595815710107image.png?x-oss-process=style/small\", \"http://static.taswell.cn/57855C971FF740B46EAE8F7FE…/1596075958804image.png?x-oss-process=style/small\"]\r\n          tag, // \"\"\r\n          title, // \"dfy\"\r\n          uid, // \"18\"\r\n          update_time, // null\r\n        }) => {\r\n          return (\r\n            <E.List key={id}>\r\n              <E.Icon src={avatar_url} alt=\"\" />\r\n              <div>\r\n                <E.Title\r\n                  to={`/article/${id}`}\r\n                  target={'_blank'}\r\n                >\r\n                  {title || \"NO TITLE\"}\r\n                </E.Title>\r\n                <E.SubTitle>\r\n                  {name}\r\n                  <Dot />\r\n                  {create_time}\r\n                </E.SubTitle>\r\n              </div>\r\n            </E.List>\r\n          )\r\n        }\r\n      )}\r\n      <E.AddBtn onClick={() => {\r\n        _page(page => page + 1)\r\n      }}>ADD MORE</E.AddBtn>\r\n    </E.ListContent>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { GET_ARTICLE_INFO } from \"../api\"\r\nimport styled from \"styled-components\"\r\nimport Dot from \"../widget/Dot\"\r\n\r\nconst E = {\r\n  BoxContent: styled.div`\r\n    padding: 20px;\r\n    width: 800px;\r\n    margin: 0 auto;\r\n    border: 2px dashed #ccc;\r\n    border-top: none;\r\n    border-bottom: none;\r\n    background: #fff;\r\n  `,\r\n  Box: styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 0px;\r\n`,\r\n  Icon: styled.img`\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 30px;\r\n  margin-right: 10px;\r\n`,\r\n  SubTitle: styled.div`\r\n  font-size: 13px;\r\n  color: #aaa;\r\n`,\r\n  Title: styled.div`\r\n  color:#444;\r\n`,\r\n}\r\n\r\nexport default () => {\r\n  const { id } = useParams()\r\n  const [info, _info] = useState({})\r\n\r\n  useEffect(() => {\r\n    GET_ARTICLE_INFO({ id }).then((rs) => {\r\n      console.log(rs)\r\n      _info(rs)\r\n    })\r\n  }, [id])\r\n\r\n  return (\r\n    <E.BoxContent>\r\n      <E.Box key={id}>\r\n        <E.Icon src={info.avatar_url} alt=\"\" />\r\n        <div>\r\n          <E.Title>\r\n            {info.title || \"NO TITLE\"}\r\n          </E.Title>\r\n          <E.SubTitle>\r\n            {info.name}\r\n            <Dot />\r\n            {info.create_time}\r\n          </E.SubTitle>\r\n        </div>\r\n      </E.Box>\r\n      <div style={{ fontSize: 13, color: '#484848' }} dangerouslySetInnerHTML={{ __html: info.content }} />\r\n    </E.BoxContent>\r\n  )\r\n}\r\n","import React from \"react\"\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\"\nimport Home from \"./page/Home\"\nimport Article from \"./page/Article\"\n\nexport default () => (\n  <Router>\n    <Switch>\n      <Route path=\"/\" exact>\n        <Home />\n      </Route>\n      <Route path=\"/article/:id\" exact>\n        <Article />\n      </Route>\n    </Switch>\n  </Router>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./assets/global.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}